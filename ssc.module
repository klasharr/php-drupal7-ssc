<?php

module_load_include('inc', 'ssc', 'ssc');
module_load_include('inc', 'ssc', 'ssc_theme');
module_load_include('inc', 'ssc', 'ssc_data');

/**
 * hook_init() implementation
 *
 * @see form_ssc_main_settings()
 */
function ssc_init() {
  drupal_add_js('misc/collapse.js');
  drupal_add_js('misc/form.js');

  $front_title_tag = variable_get('ssc_front_meta_desc');
  $front_meta_desc = variable_get('ssc_front_title');

  // @todo, add admin check here, rather than just logged in check
  if((empty( $front_title_tag) || empty($front_meta_desc) && user_is_logged_in())){
    drupal_set_message(t('You must set your front spage html title and meta description text, see !see ',
        array('!see' => l('configuration', 'admin/config/ssc/settings'))),'warning');
  }

  if (!user_is_logged_in() && drupal_match_path(
      drupal_get_path_alias(current_path()),
      variable_get('ssc_members_only_paths')
    )
  ) {
    drupal_set_message(variable_get('ssc_members_only_message'), 'warning');
    drupal_goto('user/login');
  }

  if (user_is_logged_in() && current_path() == 'user/' . variable_get(
      'ssc_generic_user_id',
      0
    )
  ) {
    drupal_goto('members');
  }

  if (current_path() == 'members/meeting-minutes') {
    drupal_goto(variable_get('ssc_default_minutes_page'));
  }

}

/**
 * hook_menu implementation
 * @return array
 */
function ssc_menu() {
  $items = array();

  $items['login'] = array(
    'title' => t('Login'),
    'page callback' => '_ssc_page_forward',
    'page arguments' => array('login'),
    'access callback' => 'user_is_anonymous',
    'weight' => 50,
    'menu_name' => 'main-menu',
    'file' => 'ssc.inc',
  );

  $items['logout'] = array(
    'title' => t('Logout'),
    'page callback' => '_ssc_page_forward',
    'page arguments' => array('logout'),
    'access callback' => 'user_is_logged_in',
    'weight' => 51,
    'menu_name' => 'main-menu',
    'file' => 'ssc.inc',
  );

  $items['admin/config/ssc'] = array(
    'title' => 'Sailing club settings',
    'title callback' => 't',
    'description' => t('Sailing club configuration'),
    'position' => 'right',
    'weight' => 30,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'access arguments' => array('administer site configuration'),
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/ssc/settings'] = array(
    'title' => 'Settings',
    'title callback' => 't',
    'description' => t('Sailing club settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_ssc_main_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ssc.inc',
    'weight' => '10',
  );

  $items['clear-page-cache'] = array(
    'title' => 'Clear page cache',
    'title callback' => 't',
    'description' => t(
      'Clear the page cache for force changes to be visible to users.'
    ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ssc_form_clear_path_cache'),
    'access callback' => '_ssc_page_clear_access_callback',
    'file' => 'ssc.inc',
    'menu' => 'navigation',
  );

  $items['jump'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_ssc_page_secure_redir',
    'file' => 'ssc.inc',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * hook_menu_alter implementation
 * @param $items
 */
function ssc_menu_alter(&$items) {
  if (!empty($items['user/%user/edit'])) {
    $items['user/%user/edit']['access callback'] = '_ssc_user_edit_access_callback';
    $items['user/%user/edit']['access arguments'] = array(1);
  }

  if (!empty($items['members'])) {
    $items['members']['access callback'] = 'user_access';
    $items['members']['access arguments'] = array('view members only section');
  }

  unset($items['user/password']);
}

/**
 * hook_permission implementation
 * @return array
 */
function ssc_permission() {

  return array(
    'view members only section' => array(
      'title' => t('Members only'),
      'description' => t('Allow users to view members only pages.'),
    ),
    'ssc clear page cache' => array(
      'title' => t('Clear page cache'),
      'description' => t('Trigger a drupal page cache clear'),
    ),
  );
}

/**
 * hook_node_access implementation
 *
 * This should be redundant, but it's here in case a url alias is missing.
 *
 * @param $node
 * @param $op
 * @param $account
 * @return null|string
 */
function ssc_node_access($node, $op, $account) {
  if ($op != 'view' || !is_object($node)) {
    return NODE_ACCESS_IGNORE;
  }

  if (in_array($node->type, array('file', 'private_page')) && user_is_anonymous(
    )
  ) {
    return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * hook_block_info implementation
 *
 * @return mixed
 */
function ssc_block_info() {
  $blocks['slider'] = array(
    'info' => t('SSC: image slider'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['results'] = array(
    'info' => t('SSC: results panel'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['results_small'] = array(
    'info' => t('SSC: results panel small'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;

}

/**
 * hook_block_view implementation
 *
 * @param string $delta
 * @return array
 */
function ssc_block_view($delta = '') {

  $block = array();

  switch ($delta) {

    case 'results':

      $block['subject'] = t('Recently added results');
      $block['content'] = theme('results_large', array(
          'data' => _ssc_get_webservice_results_data(),
          'display_count' => variable_get('latest_results_large_panel_count', 2)
        )
      );
      break;

    case 'results_small':

      $block['subject'] = t('Latest results');
      $block['content'] = theme('results_small', array(
          'data' => _ssc_get_webservice_results_data(),
          'display_count' => variable_get('latest_results_small_panel_count', 2)
        )
      );
      $block['status'] = TRUE;
      $block['region'] = 'sidebar_second';
      $block['visibility'] = BLOCK_VISIBILITY_LISTED;
      $block['pages'] = '<front>';
      break;

    case 'slider':

      drupal_add_js(
        drupal_get_path('module', 'ssc') . '/carousel/jquery.jcarousel.min.js'
      );
      drupal_add_js(drupal_get_path('module', 'ssc') . '/carousel/carousel.js');
      drupal_add_css(
        drupal_get_path('module', 'ssc') . '/carousel/carousel.css'
      );

      $block['subject'] = NULL;
      $block['content'] =  array(
        '#markup' => ''

      );

      break;

  }

  return $block;

}

/**
 * Implements hook_block_configure().
 */
function ssc_block_configure($delta='') {

  $form = array();

  switch($delta) {

    case 'results_small' :
      $form['latest_results_small_panel_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Display count'),
        '#description' => t('How many latest results do you want to show, enter a number between 1 and 10'),
        '#size' => 2,
        '#default_value' => variable_get('latest_results_small_panel_count', 2),
        '#element_validate' => array('_ssc_validate_block_settings_latest_results_small_panel_count'),
      );
      $form['results_more_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Small results panel more URL'),
        '#description' => t('Where should the \'more\' URL go to?'),
        '#size' => 60,
        '#default_value' => variable_get('results_more_url'),
      );
      break;

    case 'results' :
      $form['latest_results_large_panel_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Display count'),
        '#description' => t('How many latest results do you want to show, enter a number between 1 and 30.'),
        '#size' => 2,
        '#default_value' => variable_get('latest_results_large_panel_count', 10),
        '#element_validate' => array('_ssc_validate_block_settings_latest_results_large_panel_count'),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function ssc_block_save($delta = '', $edit = array()) {

  switch($delta) {
    case 'results_small':
      variable_set('latest_results_small_panel_count', $edit['latest_results_small_panel_count']);
      variable_set('results_more_url', $edit['results_more_url']);
      break;
    case 'results':
      variable_set('latest_results_large_panel_count', $edit['latest_results_large_panel_count']);
      break;
  }
}

/**
 * hook__preprocess_page implementation
 *
 * Add a meta description based on a Field. This gives us more SEO control.
 * Also the home meta description which comes from an admin form
 *
 * @see form_ssc_main_settings()
 * @param $vars
 */
function ssc_preprocess_page(&$vars) {

  // Home page meta description tag
  if (drupal_is_front_page()) {
    $aMetaTag = array(

      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'Description',
        'content' => variable_get('ssc_front_meta_desc', ''),
      ),
    );
    drupal_add_html_head($aMetaTag, 'meta_description');

    return;
  }

  // node page meta description tag
  if (empty($vars['node']) || ($vars['node']->type != 'page')) {
    return;
  }

  $aFieldItems = field_get_items(
    'node',
    $vars['node'],
    'field_html_meta_description'
  );

  if (empty($aFieldItems)) {
    return;
  }

  $aMetaDescription = field_view_value(
    'node',
    $vars['node'],
    'field_html_meta_description',
    $aFieldItems[0]
  );

  if (empty($aMetaDescription['#markup'])) {
    return;
  }

  $aMetaTag = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'Description',
      'content' => $aMetaDescription['#markup']
    ),
  );
  drupal_add_html_head($aMetaTag, 'meta_description');

}

/**
 * hook ssc_preprocess_html implementation
 *
 * Currently just adding html title tags based on the field field_html_title_tag and
 * front page title which comes from an admin form.
 *
 * @see form_ssc_main_settings()
 * @param $vars
 */
function ssc_preprocess_html(&$vars) {

  if (drupal_is_front_page()) {
    $vars['head_title'] = variable_get('ssc_front_title', '');

    return;
  }

  if ($vars['page']['#type'] != 'page') {
    return;
  }

  $node = menu_get_object();

  if (empty($node)) {
    return;
  }

  $aFieldItems = field_get_items('node', $node, 'field_html_title_tag');

  if (empty($aFieldItems)) {
    return;
  }

  $aTitleTag = field_view_value(
    'node',
    $node,
    'field_html_title_tag',
    $aFieldItems[0]
  );
  $vars['head_title'] = $aTitleTag['#markup'];

}

/**
 * Implementation of hook_theme().
 */
function ssc_theme() {
  return array(
    'results_large' => array(
       'variables' => array(
        'error' => NULL,
        'data' => NULL,
      ),
    ),
  'results_small' => array(
      'variables' => array(
        'error' => NULL,
        'data' => NULL,
      ),
    )
  );
}
